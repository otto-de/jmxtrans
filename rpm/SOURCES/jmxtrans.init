#!/bin/sh
#
# chkconfig: - 90 60
# pidfile: /var/run/jmxtrans.pid
# config: /etc/sysconfig/jmxtrans
#
### BEGIN INIT INFO
# Provides: jmxtrans
# Required-Start: $local_fs $remote_fs $network $named
# Required-Stop: $local_fs $remote_fs $network
# Default-Start: 3 5
# Default-Stop:  0 1 2 6
# Short-Description: run jmxtrans daemon
# Description: jmxtrans is very powerful tool which reads json
#              configuration files of servers/ports and jmx domains - attributes - types
#              and then outputs the data in whatever format you want via special 'Writer' objects which you can code up yourself.
#              It does this with a very efficient engine design that will scale to querying thousands of machines.
### END INIT INFO

#
#Â init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

# Source function library.
if [ -r /etc/init.d/functions ]; then
    . /etc/init.d/functions
fi

RETVAL=0
prog="jmxtrans"
user="jmxtrans"
exec="/usr/share/jmxtrans/jmxtrans.sh"
lockdir=/var/lock/subsys
lockfile=$lockdir/jmxtrans
config=/etc/sysconfig/jmxtrans

if [ -f "${config}" ]; then
    . "${config}"
fi


start() {
    echo -n $"Starting $prog: "

    daemon --user=$user $exec start
    RETVAL=$?

    echo
    [ $RETVAL -eq 0 ] && [ -d $lockdir ] && touch $lockfile
}

stop() {
    echo -n $"Stopping $prog: "
    $exec stop
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && [ -f $lockfile ] && rm -f $lockfile
}

status() {
    $exec status
}

restart() {
    daemon --user=$user $exec restart
}

# See how we were called.
case "$1" in
  start)
        status && exit 0
        $1
        ;;
  stop)
        status || exit 0
        $1
        ;;
  status)
        status
        RETVAL=$?
        ;;
  restart|force-reload|reload)
        restart
        ;;
  *)
        echo $"Usage: $prog {start|stop|restart|force-reload|reload|status}"
        RETVAL=2
esac

exit $RETVAL
